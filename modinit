#!/bin/bash

#set default directories for different types of modules
#may consider putting this into a .mod_config file in user's home directory

scriptName="modinit"
function printUsage () {
    cat <<EOF

Synopsis

    $scriptName [-h | --help] [-s -p -g -u]

Description:
        -s:     to start a software module 	modinit -s
	-p:	to start a project module	modinit -p
	-g:	to start a genome module	modinit -g
	-u:	to start a user module		modinit -u

Software Modules:	Version control for Software. Standard use of unix modules made easy.
Project Modules:	Version control for Projects. Create env variables for important files or directories.  Summarize project.	
Genome Module:		Version control for Genomes.  Creates commonly used databases and useful fasta files from genome and GFF.
User Module:		Version control for Users. Sets MODBASE variable, offloads environmental variables to a loadable module instead of .bashrc

Author

    Andrew Severin, Genome Informatics Facilty, Iowa State University
    severin@iastate.edu
    1 December, 2015


EOF
}

if [ $# -lt 1 ] ; then
        printUsage
        exit 0
fi

if [ -z "$MODBASE" ]; then
	echo "Your MODBASE varaible that specifies the directory for your module files is not set"
#	echo "please module load user or set your module files base directory now"
       		MODBASE=/home/$(whoami)/privatemodules/
                read -e -i "$MODBASE" -p "please module load user or set your module files base directory now:" input
                MODBASE="${input:-$MODBASE}"

	[[ -d $MODBASE/software/modules/ ]] || mkdir -p $MODBASE/software/modules;echo "$MODBASE/software/modules was created"
	[[ -d $MODBASE/project/modules/ ]] || mkdir -p $MODBASE/project/modules;echo "$MODBASE/project/modules was created"
	[[ -d $MODBASE/genome/modules/ ]] || mkdir -p $MODBASE/genomes/modules/;echo "$MODBASE/genomes/modules was created"
	[[ -d $MODBASE/user/modules/ ]] || mkdir -p $MODBASE/user/modules;echo "$MODBASE/user/modules was created"
	createUser=1
fi

##Here the module directories are set.
#software
SOFTMODDIR=$MODBASE/software/modules/
#Project
PROJMODDIR=$MODBASE/project/modules
#GENOME
GENMODDIR=$MODBASE/genomes/modules/
#USER
USERMODDIR=$MODBASE/user/modules



OPTIONS=":hspug"
count=0
while getopts $OPTIONS option
        do
#check to see if user needs to create a user module because MODBASE is not set
if [[ "$createUser" -eq 1 ]]; then
	option="u"
fi
#software module
                case $option in
                s)
		modtype="S"
		DIR=$SOFTMODDIR
		echo "You have started a Software Module"
		count=$(( $count + 1))
		;;
#Project Module
                p)
                modtype="P"
		DIR=$PROJMODDIR
		echo "You have started a Project Module"
                count=$(($count+1))
		;;
#User Module
                u)
		echo "You have started a User Module"
		DIR=$USERMODDIR
                count=$(($count+1))
                modtype="U"
		;;
#Genome Module
                g)
		echo "You have started a Genome Module" 
                count=$(($count+1))
		DIR=$GENMODDIR
		modtype="G"
                ;;
#help
		h)
		printUsage
		;;
                esac
        done
shift $((OPTIND-1))
if [[ $count > 1 ]]; then
   echo "error, cannot initiate multiple types of modules" >&2
   exit 1
fi

#check to see if the module already exists
function checkexists  {
if [[ -f $DIR/$PROG/$BUILD ]]; then
        echo "This module already exists! Replace? (yes/no)"
        read  replace
        if [[ $replace != "yes" ]]; then
                exit
        fi
fi
}

#Software Module
if [[ $modtype == "S" ]]; then
		#full path of  current working directory
		fcwd=$(pwd -P)
		#just the current directory name
		cwd=$(basename $fcwd)
		#the Full path of parent directory of current working directory
		fpcwd=$(dirname $fcwd)
		#Just the name of the parent directory
		pcwd=$(basename $fpcwd)
		BUILD=$cwd
		PROG=$pcwd		
		checkexists 
		echo "Please provide a description of this software and hit enter"
                read description
                echo "Please specify any website/wiki associated with this software and hit enter"
                read website
                echo "Please specify the site you downloaded this software and hit enter"
                read download



		echo "Your module has been written to $DIR/$PROG/$BUILD"

fi

#Project Module
if [[ $modtype == "P" ]]; then
                checkexists 
		#full path of  current working directory
                fcwd=$(pwd -P)
                #just the current directory name
                cwd=$(basename $fcwd)
                #the Full path of parent directory of current working directory
                fpcwd=$(dirname $fcwd)
                #Just the name of the parent directory
                pcwd=$(basename $fpcwd)
                BUILD=$cwd
                PROG=$pcwd

                echo "Please provide a description of this project and hit enter"
                read description
                echo "Please specify any website/wiki associated with this project and hit enter"
                read website
                echo "Please specify the site you downloaded this project and hit enter"
                read download
                echo date
		echo "Your module has been written to $DIR/$PROG/$BUILD"
fi
#User Module
if [[ $modtype == "U" ]]; then
		name=$(whoami)
		read -e -i "$name" -p "Please enter a user name: " input
		name="${input:-$name}"		
		PROG=$name
		BUILD=${name}_${HOSTNAME}
 		checkexists
mkdir -p $DIR/$PROG
BUILD2=$(echo ${BUILD//./p})

cat << MODFILE > $DIR/$PROG/$BUILD
#%Module1.0#####################################################################
##
setenv  ${PROG}_${BUILD2}_modulefile    "$DIR/$PROG/$BUILD"
setenv  ${PROG}_${BUILD2}_version       $BUILD
setenv  ${PROG}_${BUILD2}_name          $PROG
setenv  ${PROG}_${BUILD2}_createdate    $(date '+%m/%d/%y_%H:%M:%S')
setenv  ${PROG}_${BUILD2}_creator       $(whoami)
setenv  ${PROG}_${BUILD2}_dir           $(pwd -P)
setenv  MODBASE    			$MODBASE
setenv	COMMON_SCRIPTS			~/isugif/common_scripts/
setenv	COMMON_ANALYSES			~/isugif/common_analyses/
setenv	PROJECT_MODULES			~/isugif/ProjectModules

MODFILE


		echo "Your user module has been written to $DIR/$PROG/$BUILD"
		echo "Please add module load $name to your .bashrc file"
		echo '"echo "module load '$name'" >> .bashrc'
exit
fi
#Genome Module
if [[ $modtype == "G" ]]; then
		checkexists
		prepare_genome_modules.sh $@
		exit;
fi
#Get Program and Build from current working directory
#assumes that you are in
#software/version directory
#PI/project
#so need to put them up above
#Genome and User modules are special cases and will need to be handled differently


#generic module file
mkdir -p $DIR/$PROG
BUILD2=$(echo ${BUILD//./p})

cat << MODFILE > $DIR/$PROG/$BUILD
#%Module1.0#####################################################################
##
setenv	${PROG}_${BUILD2}_modulefile    "$DIR/$PROG/$BUILD"
setenv	${PROG}_${BUILD2}_version       $BUILD
setenv	${PROG}_${BUILD2}_name		$PROG
setenv  ${PROG}_${BUILD2}_description   "$description"
setenv  ${PROG}_${BUILD2}_website       "$website"
setenv  ${PROG}_${BUILD2}_download      "$download"
setenv  ${PROG}_${BUILD2}_createdate    $(date '+%m/%d/%y_%H:%M:%S')
setenv  ${PROG}_${BUILD2}_creator       $(whoami)
setenv  ${PROG}_${BUILD2}_dir		$(pwd -P)
MODFILE

#these next lines are primarily for the software module creation 

if [[ -d $(pwd -P)/bin ]]; then
cat << MODFILE >> $DIR/$PROG/$BUILD
prepend-path	PATH	$(pwd -P)/bin
MODFILE
fi
if [[ -d $(pwd -P)/share/man ]]; then
cat << MODFILE >> $DIR/$PROG/$BUILD
prepend-path	MANPATH	$(pwd -P)/share/man
MODFILE
fi

if [[ -d $(pwd -P)/lib ]]; then
cat << MODFILE >> $DIR/$PROG/$BUILD
prepend-path    LD_LIBRARY_PATH         $(pwd -P)/lib
prepend-path    LIBRARY_PATH         $(pwd -P)/lib
MODFILE
fi

if [[ -d $(pwd -P)/include ]]; then
cat << MODFILE >> $DIR/$PROG/$BUILD     
prepend-path    C_INCLUDE_PATH          $(pwd -P)/include
prepend-path    CPLUS_INCLUDE_PATH      $(pwd -P)/include
MODFILE
fi


if [[ -d $(pwd -P)/lib/pkgconfig ]]; then
cat << MODFILE >> $DIR/$PROG/$BUILD     
prepend-path    PKG_CONFIG_PATH         $(pwd -P)/lib/pkgconfig
MODFILE
fi


